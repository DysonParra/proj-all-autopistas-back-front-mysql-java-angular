{
	"info": {
		"_postman_id": "ed0f2570-389d-48a7-8ad4-31b574448008",
		"name": "Autopistas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Peticiones",
			"item": [
				{
					"name": "badge",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"strTitle\" : \"{{id}}\",",
                                            "  \"strClasses\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"strTitle\" : \"{{id}}\",",
                                            "  \"strClasses\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'badge');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "categoria",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdCategoria\" : \"{{id}}\",",
                                            "  \"strCategoria\" : \"\",",
                                            "  \"intPesoMaximo\" : -1,",
                                            "  \"intTolerancia\" : -1,",
                                            "  \"strDescripcion\" : \"\",",
                                            "  \"intEjeSencillo\" : -1,",
                                            "  \"intEjeTandem\" : -1,",
                                            "  \"intTotalEjes\" : -1",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdCategoria\" : \"{{id}}\",",
                                            "  \"strCategoria\" : \"S12\",",
                                            "  \"intPesoMaximo\" : 102,",
                                            "  \"intTolerancia\" : 102,",
                                            "  \"strDescripcion\" : \"S12\",",
                                            "  \"intEjeSencillo\" : 102,",
                                            "  \"intEjeTandem\" : 102,",
                                            "  \"intTotalEjes\" : 102",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'categoria');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "comparendo",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdComparendo\" : \"{{id}}\",",
                                            "  \"strPlacaVehiculo\" : \"\",",
                                            "  \"intIdPolicia\" : -1,",
                                            "  \"intCedulaConductor\" : -1,",
                                            "  \"intTiqueteNro\" : -1,",
                                            "  \"intCodigoComparendo\" : -1,",
                                            "  \"strObservaciones\" : \"\",",
                                            "  \"enmTipoInfractor\" : null",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdComparendo\" : \"{{id}}\",",
                                            "  \"strPlacaVehiculo\" : \"S12\",",
                                            "  \"intIdPolicia\" : 102,",
                                            "  \"intCedulaConductor\" : 102,",
                                            "  \"intTiqueteNro\" : 102,",
                                            "  \"intCodigoComparendo\" : 102,",
                                            "  \"strObservaciones\" : \"S12\",",
                                            "  \"enmTipoInfractor\" : null",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'comparendo');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "conductor",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intCedulaConductor\" : \"{{id}}\",",
                                            "  \"strNombreConductor\" : \"\",",
                                            "  \"strApellidoConductor\" : \"\",",
                                            "  \"strTelefono\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intCedulaConductor\" : \"{{id}}\",",
                                            "  \"strNombreConductor\" : \"S12\",",
                                            "  \"strApellidoConductor\" : \"S12\",",
                                            "  \"strTelefono\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'conductor');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "configuracion",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdConfiguracion\" : \"{{id}}\",",
                                            "  \"strParametro\" : \"\",",
                                            "  \"txtValor\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdConfiguracion\" : \"{{id}}\",",
                                            "  \"strParametro\" : \"S12\",",
                                            "  \"txtValor\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'configuracion');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "menu",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"strId\" : \"{{id}}\",",
                                            "  \"strTitle\" : \"\",",
                                            "  \"strSubtitle\" : \"\",",
                                            "  \"strType\" : \"\",",
                                            "  \"strIcon\" : \"\",",
                                            "  \"strLink\" : \"\",",
                                            "  \"bitExactMatch\" : false,",
                                            "  \"bitActive\" : false,",
                                            "  \"bitDisabled\" : false,",
                                            "  \"strBadge\" : \"\",",
                                            "  \"strFather\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"strId\" : \"{{id}}\",",
                                            "  \"strTitle\" : \"S12\",",
                                            "  \"strSubtitle\" : \"S12\",",
                                            "  \"strType\" : \"S12\",",
                                            "  \"strIcon\" : \"S12\",",
                                            "  \"strLink\" : \"S12\",",
                                            "  \"bitExactMatch\" : true,",
                                            "  \"bitActive\" : true,",
                                            "  \"bitDisabled\" : true,",
                                            "  \"strBadge\" : \"S12\",",
                                            "  \"strFather\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'menu');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "mercancia",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdMercancia\" : \"{{id}}\",",
                                            "  \"strNombreMercancia\" : \"\",",
                                            "  \"strDescripcionMercancia\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdMercancia\" : \"{{id}}\",",
                                            "  \"strNombreMercancia\" : \"S12\",",
                                            "  \"strDescripcionMercancia\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'mercancia');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "periferico",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"enmTipoPeriferico\" : null,",
                                            "  \"strIp\" : \"\",",
                                            "  \"intPuerto\" : -1,",
                                            "  \"strCodigo\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"enmTipoPeriferico\" : null,",
                                            "  \"strIp\" : \"S12\",",
                                            "  \"intPuerto\" : 102,",
                                            "  \"strCodigo\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'periferico');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "pesaje",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intTiqueteNumero\" : -1,",
                                            "  \"strPlaca\" : \"\",",
                                            "  \"strCodigo\" : \"\",",
                                            "  \"intNumeroInterno\" : -1,",
                                            "  \"strTipoVehiculo\" : \"\",",
                                            "  \"strConductor\" : \"\",",
                                            "  \"strCedula\" : \"\",",
                                            "  \"strProducto\" : \"\",",
                                            "  \"strPlanta\" : \"\",",
                                            "  \"strCliente\" : \"\",",
                                            "  \"strTransportadora\" : \"\",",
                                            "  \"dtFechaHoraPesoVacio\" : \"2020-03-07 05:23:10\",",
                                            "  \"dtFechaHoraPesoLleno\" : \"2020-03-07 05:23:10\",",
                                            "  \"strCiv\" : \"\",",
                                            "  \"strDireccion\" : \"\",",
                                            "  \"strEntregadoPor\" : \"\",",
                                            "  \"strRecibidoPor\" : \"\",",
                                            "  \"strShipment\" : \"\",",
                                            "  \"strSello\" : \"\",",
                                            "  \"strR\" : \"\",",
                                            "  \"strContenedor\" : \"\",",
                                            "  \"strObservacion\" : \"\",",
                                            "  \"enmTipoIngreso\" : null",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intId\" : \"{{id}}\",",
                                            "  \"intTiqueteNumero\" : 102,",
                                            "  \"strPlaca\" : \"S12\",",
                                            "  \"strCodigo\" : \"S12\",",
                                            "  \"intNumeroInterno\" : 102,",
                                            "  \"strTipoVehiculo\" : \"S12\",",
                                            "  \"strConductor\" : \"S12\",",
                                            "  \"strCedula\" : \"S12\",",
                                            "  \"strProducto\" : \"S12\",",
                                            "  \"strPlanta\" : \"S12\",",
                                            "  \"strCliente\" : \"S12\",",
                                            "  \"strTransportadora\" : \"S12\",",
                                            "  \"dtFechaHoraPesoVacio\" : \"2021-01-02 01:24:45\",",
                                            "  \"dtFechaHoraPesoLleno\" : \"2021-01-02 01:24:45\",",
                                            "  \"strCiv\" : \"S12\",",
                                            "  \"strDireccion\" : \"S12\",",
                                            "  \"strEntregadoPor\" : \"S12\",",
                                            "  \"strRecibidoPor\" : \"S12\",",
                                            "  \"strShipment\" : \"S12\",",
                                            "  \"strSello\" : \"S12\",",
                                            "  \"strR\" : \"S12\",",
                                            "  \"strContenedor\" : \"S12\",",
                                            "  \"strObservacion\" : \"S12\",",
                                            "  \"enmTipoIngreso\" : null",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'pesaje');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "policia",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdPolicia\" : \"{{id}}\",",
                                            "  \"strNombrePolicia\" : \"\",",
                                            "  \"strApellidoPolicia\" : \"\",",
                                            "  \"strTelefono\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdPolicia\" : \"{{id}}\",",
                                            "  \"strNombrePolicia\" : \"S12\",",
                                            "  \"strApellidoPolicia\" : \"S12\",",
                                            "  \"strTelefono\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'policia');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "registro-vehiculo",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intTiqueteNro\" : \"{{id}}\",",
                                            "  \"intIdRepeso\" : -1,",
                                            "  \"intIdCategoria\" : -1,",
                                            "  \"intCedulaUsuario\" : -1,",
                                            "  \"strPlacaVehiculo\" : \"\",",
                                            "  \"intIdMercancia\" : -1,",
                                            "  \"intCedulaConductor\" : -1,",
                                            "  \"dtFechaHoraEstatica\" : \"2020-03-07 05:23:10\",",
                                            "  \"intPesoEstatica\" : -1,",
                                            "  \"intSobrepeso\" : -1,",
                                            "  \"bitPesajeAutorizado\" : false,",
                                            "  \"bitComparendo\" : false",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intTiqueteNro\" : \"{{id}}\",",
                                            "  \"intIdRepeso\" : 102,",
                                            "  \"intIdCategoria\" : 102,",
                                            "  \"intCedulaUsuario\" : 102,",
                                            "  \"strPlacaVehiculo\" : \"S12\",",
                                            "  \"intIdMercancia\" : 102,",
                                            "  \"intCedulaConductor\" : 102,",
                                            "  \"dtFechaHoraEstatica\" : \"2021-01-02 01:24:45\",",
                                            "  \"intPesoEstatica\" : 102,",
                                            "  \"intSobrepeso\" : 102,",
                                            "  \"bitPesajeAutorizado\" : true,",
                                            "  \"bitComparendo\" : true",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'registro-vehiculo');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "trama-comunicacion",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdTrama\" : \"{{id}}\",",
                                            "  \"strNombreTrama\" : \"\",",
                                            "  \"intPosicionInicial\" : -1,",
                                            "  \"intTotalDatosPeso\" : -1,",
                                            "  \"crCaracterFin\" : \"A\",",
                                            "  \"crCaracterInicio\" : \"A\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdTrama\" : \"{{id}}\",",
                                            "  \"strNombreTrama\" : \"S12\",",
                                            "  \"intPosicionInicial\" : 102,",
                                            "  \"intTotalDatosPeso\" : 102,",
                                            "  \"crCaracterFin\" : \"B\",",
                                            "  \"crCaracterInicio\" : \"B\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'trama-comunicacion');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "transito-dinamica",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdDinamica\" : \"{{id}}\",",
                                            "  \"intIdCategoria\" : -1,",
                                            "  \"strPlacaVehiculo\" : \"\",",
                                            "  \"dtFechaHoraTransito\" : \"2020-03-07 05:23:10\",",
                                            "  \"intPesoGeneral\" : -1,",
                                            "  \"strPesoEjes\" : \"\",",
                                            "  \"fltVelocidad\" : -1,",
                                            "  \"txtBase64Placa\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdDinamica\" : \"{{id}}\",",
                                            "  \"intIdCategoria\" : 102,",
                                            "  \"strPlacaVehiculo\" : \"S12\",",
                                            "  \"dtFechaHoraTransito\" : \"2021-01-02 01:24:45\",",
                                            "  \"intPesoGeneral\" : 102,",
                                            "  \"strPesoEjes\" : \"S12\",",
                                            "  \"fltVelocidad\" : 102,",
                                            "  \"txtBase64Placa\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'transito-dinamica');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "usuario",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intCedulaUsuario\" : \"{{id}}\",",
                                            "  \"strNombreUsuario\" : \"\",",
                                            "  \"strApellidoUsuario\" : \"\",",
                                            "  \"strSeudonimo\" : \"\",",
                                            "  \"enmTipoUsuario\" : null,",
                                            "  \"strContrasena\" : \"\",",
                                            "  \"strCargoUsuario\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intCedulaUsuario\" : \"{{id}}\",",
                                            "  \"strNombreUsuario\" : \"S12\",",
                                            "  \"strApellidoUsuario\" : \"S12\",",
                                            "  \"strSeudonimo\" : \"S12\",",
                                            "  \"enmTipoUsuario\" : null,",
                                            "  \"strContrasena\" : \"S12\",",
                                            "  \"strCargoUsuario\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'usuario');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "vehiculo",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"strPlacaVehiculo\" : \"{{id}}\",",
                                            "  \"intIdCategoria\" : -1,",
                                            "  \"strObservaciones\" : \"\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"strPlacaVehiculo\" : \"{{id}}\",",
                                            "  \"intIdCategoria\" : 102,",
                                            "  \"strObservaciones\" : \"S12\"",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'vehiculo');",
									"pm.globals.set('id', '10L');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
,
				{
					"name": "vehiculo-sobrepeso",
					"item": [
						{
							"name": "Obtener Todos los Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Insertar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"insert_request_body = ",
											"{",
                                            "  \"intIdRepeso\" : \"{{id}}\",",
                                            "  \"intIdDinamica\" : -1,",
                                            "  \"intPesoMaximo\" : -1,",
                                            "  \"intDiferenciaPeso\" : -1,",
                                            "  \"strPlacaVehiculo\" : \"\",",
                                            "  \"bitBorrado\" : false",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"insert_request_body\", JSON.stringify(insert_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{insert_request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Modificar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"update_request_body =",
											"{",
                                            "  \"intIdRepeso\" : \"{{id}}\",",
                                            "  \"intIdDinamica\" : 102,",
                                            "  \"intPesoMaximo\" : 102,",
                                            "  \"intDiferenciaPeso\" : 102,",
                                            "  \"strPlacaVehiculo\" : \"S12\",",
                                            "  \"bitBorrado\" : true",
                                            "  /*",
                                            "  */",
                                            "}",
											"pm.environment.set(\"update_request_body\", JSON.stringify(update_request_body));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{update_request_body}}"
								},
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/9/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"9",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar Registros Paginados",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista no está vacía ('_embedded' not undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).not.be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/search/0/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"search",
										"0",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Eliminar Registro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Se obtuvo respuesta del servidor\", function () {",
											"  pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{id}}",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Obtener Todos los Registros Paginados (Resultado vacío)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body existe\", function () {",
											"    pm.response.to.be.withBody; // body tiene que exitir",
											"    pm.response.to.be.json;     // Que body sea un JSON válido",
											"});",
											"",
											"pm.test(\"No ocurrió error.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Se obtuvieron enlaces.\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._links).not.be.eql(undefined);",
											"});",
											"",
											"pm.test(\"Lista está vacía ('_embedded' undefined).\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData._embedded).be.to.eql(undefined);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{protocol}}://{{host}}:{{port}}/{{api}}/{{folder_name}}/{{pages}}?page=0&size=1",
									"protocol": "{{protocol}}",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"{{api}}",
										"{{folder_name}}",
										"{{pages}}"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "size",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.globals.set('folder_name', 'vehiculo-sobrepeso');",
									"pm.globals.set('id', '101');"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.globals.set('%domEntityKey%', 101);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "protocol",
			"value": "http"
		},
		{
			"key": "host",
			"value": "localhost"
		},
		{
			"key": "port",
			"value": "8080"
		},
		{
			"key": "api",
			"value": "api/v1"
		},
		{
			"key": "pages",
			"value": "pages"
		}
	],
	"protocolProfileBehavior": {}
}